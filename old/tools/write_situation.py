#!/usr/bin/env python3
"""Utility to export a python-chess board into model/Situation.h."""

from __future__ import annotations

import argparse
import sys
from pathlib import Path
from typing import Iterable, List

import chess
import chess.pgn

# Mapping from (color, piece type) to ChessModel Figure enumeration value
FIGURE_LOOKUP = {
    (chess.WHITE, chess.PAWN): 1,
    (chess.BLACK, chess.PAWN): 2,
    (chess.WHITE, chess.KNIGHT): 3,
    (chess.BLACK, chess.KNIGHT): 4,
    (chess.WHITE, chess.BISHOP): 5,
    (chess.BLACK, chess.BISHOP): 6,
    (chess.WHITE, chess.ROOK): 7,
    (chess.BLACK, chess.ROOK): 8,
    (chess.WHITE, chess.QUEEN): 9,
    (chess.BLACK, chess.QUEEN): 10,
    (chess.WHITE, chess.KING): 11,
    (chess.BLACK, chess.KING): 12,
}


def parse_args(argv: Iterable[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Write model/Situation.h for a given python-chess position."
    )
    source = parser.add_mutually_exclusive_group(required=True)
    source.add_argument("--fen", help="FEN string describing the target position.")
    source.add_argument(
        "--pgn",
        type=Path,
        help="Path to a PGN file. Use --game-index/--ply to select the position.",
    )
    parser.add_argument(
        "--game-index",
        type=int,
        default=0,
        help="0-based index of the game within the PGN file (default: 0).",
    )
    parser.add_argument(
        "--ply",
        type=int,
        default=0,
        help="Number of half-moves to apply from the start position (default: 0).",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("model") / "Situation.h",
        help="Destination header path (default: model/Situation.h).",
    )
    return parser.parse_args(argv)


def load_board_from_fen(fen: str) -> chess.Board:
    try:
        return chess.Board(fen)
    except ValueError as exc:
        raise SystemExit(f"Invalid FEN: {exc}") from exc


def load_board_from_pgn(path: Path, game_index: int, ply: int) -> chess.Board:
    try:
        with path.open() as handle:
            game = None
            for _ in range(game_index + 1):
                game = chess.pgn.read_game(handle)
                if game is None:
                    raise SystemExit(
                        f"PGN {path} does not contain a game at index {game_index}."
                    )
            board = game.board()
            for idx, move in enumerate(game.mainline_moves()):
                if idx >= ply:
                    break
                board.push(move)
            return board
    except FileNotFoundError as exc:
        raise SystemExit(f"Cannot open PGN file: {path}") from exc


def board_to_cells(board: chess.Board) -> List[List[int]]:
    cells: List[List[int]] = [[0 for _ in range(4)] for _ in range(8)]
    for square, piece in board.piece_map().items():
        row = 7 - chess.square_rank(square)
        col = chess.square_file(square)
        pair = col // 2
        shift = (col % 2) * 4
        figure = FIGURE_LOOKUP[(piece.color, piece.piece_type)]
        value = cells[row][pair]
        value &= ~(0xF << shift)
        value |= (figure & 0xF) << shift
        cells[row][pair] = value
    return cells


def format_header(board: chess.Board, cells: List[List[int]]) -> str:
    lines = [
        "// Generated by tools/write_situation.py",
        f"// FEN: {board.fen()}",
        "Chessboard board = {{",
    ]
    for row_index, row in enumerate(cells):
        row_values = ", ".join(f"0x{value:02X}" for value in row)
        suffix = "," if row_index < len(cells) - 1 else ""
        lines.append(f"    {{{row_values}}}{suffix}")
    lines.append("}};")
    turn = "ColorWhite" if board.turn == chess.WHITE else "ColorBlack"
    lines.append(f"int8_t whoseTurn = {turn};")
    lines.append("")
    return "\n".join(lines)


def main(argv: Iterable[str] | None = None) -> int:
    args = parse_args(argv or sys.argv[1:])
    if args.fen is not None:
        board = load_board_from_fen(args.fen)
    else:
        if args.pgn is None:
            raise SystemExit("Either --fen or --pgn must be provided.")
        board = load_board_from_pgn(args.pgn, args.game_index, args.ply)

    cells = board_to_cells(board)
    header = format_header(board, cells)
    args.output.write_text(header)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
